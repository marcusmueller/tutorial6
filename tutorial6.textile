{{>toc}}

*Responsible: Ben*

h1. Using GNU Radio with Hardware

So far, all of the tutorials in this series have centered around using GNU Radio as a prototyping & development platform through simulation. One of the great strengths of GNU Radio, though, is how easy it is to move from simulation to real-world operation. In this tutorial, we will build on what you have learned so far and create a real-world transmitters and receivers.

In this tutorial, we will take your previous QPSK design and turn it into an actual transmitter. We will also build, from-scratch, a complete FM radio receiver that you can use to listen to your local FM radio stations. Along the way, we will discuss a number of considerations that come into play when working with real-world radio hardware.

h2. Simulation vs The Real World

Moving from simulation to real-world operation also brings a host of new challenges to solve. Radio and RF engineering are very complex disciplines, and there is a lot to consider when building an actual radio system. Along with the challenges of designing the theory of your communications system, you now also need to deal with impairments from your radio hardware, issues introduced by your physical medium (i.e., your wireless or wire channel), synchronization design, etc.,

To learn more about real-world radio impairments, a great place to start is the ~45 minute tutorial that Matt Ettus teaches at conferences occasionally. You can find a video of it, here: "YouTube: Practical Software Radio":https://www.youtube.com/watch?v=wqKNUXDdIvU

h2. What Will I Need?

If you don't have an actual radio to work with, this tutorial is still useful. The first section (transmitting) will teach you the basics of interfacing with hardware. For the second section, we have provided a recording from an actual radio, with nothing done to the data. You can use this in your flowgraph to simulate hardware passing you samples. *[TODO: Actually provide this recording]*

This tutorial will be most useful, though, if you have a piece of radio hardware that you can use with GNU Radio. There is a large and growing number of vendors that provide hardware with GNU Radio drivers, and they span from very cheap $20 receivers to very high-performance tens-of-thousands-of-dollars sort of systems.

The entirety of this tutorial is possible with a simple, low-bandwidth, half-duplex radio. Most of the tutorial is possible if you have a radio that can only receive, assuming it can tune to the FM bands. Most countries allot between ~87 MHz and ~108 MHz to FM broadcast radio, with some slight variations on the floor and ceiling of the range.

h2. Legal Considerations

In this tutorial, we will be transmitting a signal, but you should directly connect your transmit antenna port to a spectrum analyzer or some other test equipment. If you do not directly wire your radio to a receiving device, you will be emitting over-the-air. If you do not have any sort of load attached to your transmit antenna, and you accidentally transmit with too much power, you risk high-power reflections damaging your radio hardware.

You are responsible for complying with the relevant laws in your country / state of operation. Not transmitting is the only guaranteed way to stay legal. Transmitting directly to an analyzer is another great option. If you do not have an analyzer, I recommend simply reading through the transmit section, but not actually executing the flowgraph.

h2. Using UHD Blocks

The author is using an "Ettus Research USRP B200":http://b200.ettus.com, which uses the "USRP Hardware Driver (UHD)":https://github.com/EttusResearch/uhd. Thus, the hardware sources & sinks used in this tutorial will be "gr-uhd":http://gnuradio.org/redmine/projects/gnuradio/repository/revisions/master/show/gr-uhd blocks.

If you are using a different piece of hardware, you should use the blocks suggested by your hardware vendor. Another set of popular HW blocks, for example, is "gr-osmosdr":http://sdr.osmocom.org/trac/wiki/GrOsmoSDR.

In order to use UHD blocks, you must have UHD installed. There are a number of ways to install UHD, which you can read about "here":http://code.ettus.com/redmine/ettus/projects/uhd/wiki. If you built GNU Radio from source, you should have seen *gr-uhd* in the list of components being built in the CMake output. If GNU Radio successfully found your UHD installation, you should see a group of UHD blocks in the GNU Radio Companion:

!grc_uhd_blocks.png!

h2. Building a QPSK Transmitter

|Please read the *Legal Considerations* section, above, before starting this section. You are solely responsible for your actions over-the-air.|

h3. Picking Up QPSK Again

We will start by hacking on the QPSK flowgraph that you made in Tutorial Four *[TODO: Make this a usable link]*. In that tutorial, you demodulated a QPSK signal and saved it to a file. Here, instead of demodulating the signal, we are going to transmit the QPSK signal you were generating.

Let's start by removing your demodulator and file sink, but leave the WX Constellation Sink. This should leave you with a flowgraph that looks something like this:

!qpsk_tutorial_4.png!

You can also just download the flowgraph pictured above to get rolling: attachment:gr-tutorial-qpsk-tx.grc

If you execute that flowgraph, you should be looking at the symbol constellation for your QPSK signal (with some simulated noise).

!qpsk_simulated.png!

h3. Moving from Simulation to Real TX

Now, let's move from simulation to actually transmitting! First, connect your transmit antenna to your spectrum analyzer (if you intend to actually transmit).

Since we are no longer simulating a signal, let's get rid of that noise source and the adder. We will keep the throttle block, but *only* use it for our 'WX Constellation Sink'. The UHD sink does not require the use of a throttle block (for more on this, read this note in the [[FAQ#When-do-I-use-a-throttle-block]]).

Changing our program from being a simulation to an operational software radio is now as easy as dropping a new _sink_ block into your flowgraph. Find the 'UHD Sink' block, add it to your flowgraph, and connect it to your modulator's output.

h3. Configuring the UHD Sink Parameters

It is generally a good idea to create variable blocks for parameters you may tweak down the road. Let's go ahead and make a few for our radio parameters. Copy & paste your _samp_rate_ variable block twice, and create variables for _freq_ and _gain_. Set _freq_  and _gain_ to something that your hardware supports. I chose 2.421 GHz for the center frequency. Set your gain to something in the lower range of your device. I set mine to 30 dB, which is 1/3 of the available TX gain in my device.

Now, let's use our new variable blocks as actual transmit parameters in the UHD sink. Open up the properties for the UHD sink block (double-click on it, or right click and then click 'Properties'), and you should see a property window come up with a list of parameters to tweak. There are a lot more properties here than we need to touch. Scroll down to the bottom of the list. Set-up the following properties accordingly:

* *Samp Rate (Sps):* samp_rate
* *Ch0: Center Freq (Hz:* freq
* *Ch0: Gain (dB):* gain
* *Ch0: Antenna:* "TX/RX"
* *Ch0: Bandwidth (Hz):* samp_rate

At this point, your flowgraph is ready to run! It should look like this:

!qpsk_tx_uhd_constsink.png!

If you have had trouble following the instructions above, download the flowgraph here and compare it to your own: attachment:gr-tutorial-qpsk-tx-uhd.grc

h3. A Working Software Radio Transmitter

If you execute your flowgraph, you should see the usual initialization and GUI launch - except, instead of everything being simulation, you are actually transmitting your QPSK signal. Because we have our TX signal going to both the 'WX Constellation Sink' and 'UHD Sink', we can look at the symbol constellation as GNU Radio sees it, and the constellation as the analyzer sees it (if your analyzer has a QPSK demod function).

If we look at just the spectrum on the analyzer, you should be able to clearly see your signal at the frequency you selected. If you can't see it, double-check your parameters, and also try turning up your radio gain.

!qpsk_tx_specan.jpg!

Congratulations! You have built a complete QPSK software radio transmitter!

h2. Building an FM Radio Receiver

In this section, we will build a working FM radio receiver that you can use to listen to your local FM broadcast stations. This content is based on the tutorial slide series prepared by Balint Seeber, available here: "files.ettus.com/tutorials":http://files.ettus.com/tutorials/

h3. Creating a Software Radio Spectrum Analyzer

One of the more basic (but also incredibly useful) things you can do in GNU Radio with a receiver is simply plot a real-time FFT of what your receiver sees. It's a software radio spectrum analyzer. This is also a great first step because it will verify that your hardware is working correctly, and we can use it to identify broadcast stations in your area that we will tune to later on.

Create a new flowgraph. Drop a 'UHD: USRP Source' and 'WX GUI FFT Sink' into the canvas. In the the previous section, we used static variables for frequency and gain. Here, let's make them changeable on-the-fly. Find the 'WX GUI Slider', and add two of them to your flowgraph. Open each of them, and fill out the following fields as appropriate for your hardware. Mine are filled out, below, to match the capabilities of the USRP B200:

+*Frequency Slider*+
* *ID:* freq
* *Label:* freq
* *Default Value:* 1e9
* *Minimum:* 70e6
* *Maximum:* 6e9
* *Num Steps:* 1000 (_NB: The maximum number of steps in GNU Radio is 1000)
* *Converter:* Float

+*Gain Slider*+
* *ID:* gain
* *Label:* gain
* *Default Value:* 0
* *Minimum:* 0
* *Maximum:* 74
* *Num Steps:* 74
* *Converter:* Float

Change your 'samp_rate' variable block value to something interesting. I set mine to 32 MSps. Now, open up the properties for the 'UHD: USRP Source'. Just as we used our variable blocks in the previous section for our radio parameters, we will do the same here. Use the 'ID's for your sliders and variables to set the 'UHD Source' parameters:

* *Samp Rate (Sps):* samp_rate
* *Ch0: Center Freq (Hz:* freq
* *Ch0: Gain (dB):* gain
* *Ch0: Antenna:* "TX/RX"
* *Ch0: Bandwidth (Hz):* samp_rate

You should be all set!

h3. Using Your Software Radio Spectrum Analyzer

h3. Building a Broadcast FM Receiver

h3. A Working Software Radio Broadcast FM Receiver

h2. Conclusion
